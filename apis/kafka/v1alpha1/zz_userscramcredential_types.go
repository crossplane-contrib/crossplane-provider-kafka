// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserScramCredentialInitParameters struct {

	// The number of SCRAM iterations used when generating the credential
	ScramIterations *int64 `json:"scramIterations,omitempty" tf:"scram_iterations,omitempty"`
}

type UserScramCredentialObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The number of SCRAM iterations used when generating the credential
	ScramIterations *int64 `json:"scramIterations,omitempty" tf:"scram_iterations,omitempty"`

	// The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
	ScramMechanism *string `json:"scramMechanism,omitempty" tf:"scram_mechanism,omitempty"`

	// The name of the credential
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserScramCredentialParameters struct {

	// The password of the credential
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The number of SCRAM iterations used when generating the credential
	// +kubebuilder:validation:Optional
	ScramIterations *int64 `json:"scramIterations,omitempty" tf:"scram_iterations,omitempty"`

	// The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
	// +kubebuilder:validation:Required
	ScramMechanism *string `json:"scramMechanism" tf:"scram_mechanism,omitempty"`

	// The name of the credential
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// UserScramCredentialSpec defines the desired state of UserScramCredential
type UserScramCredentialSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserScramCredentialParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserScramCredentialInitParameters `json:"initProvider,omitempty"`
}

// UserScramCredentialStatus defines the observed state of UserScramCredential.
type UserScramCredentialStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserScramCredentialObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserScramCredential is the Schema for the UserScramCredentials API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,kafka}
type UserScramCredential struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	Spec   UserScramCredentialSpec   `json:"spec"`
	Status UserScramCredentialStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserScramCredentialList contains a list of UserScramCredentials
type UserScramCredentialList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserScramCredential `json:"items"`
}

// Repository type metadata.
var (
	UserScramCredential_Kind             = "UserScramCredential"
	UserScramCredential_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserScramCredential_Kind}.String()
	UserScramCredential_KindAPIVersion   = UserScramCredential_Kind + "." + CRDGroupVersion.String()
	UserScramCredential_GroupVersionKind = CRDGroupVersion.WithKind(UserScramCredential_Kind)
)

func init() {
	SchemeBuilder.Register(&UserScramCredential{}, &UserScramCredentialList{})
}
